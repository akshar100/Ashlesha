YUI.add('babe', function (Y) {
    window.Y = Y;
    var cache = new Y.CacheOffline({
        max: 200
    });
    cache.flush();

    function listSync(action, options, callback) {

        if (options.name == "commentlist" && action == "read") {
            Y.io(baseURL + 'in/comments', {
                method: 'POST',
                data: {
                    post_id: options.post_id
                },
                on: {
                    success: function (i, o, a) {
                        var data = Y.JSON.parse(o.responseText);
                        callback(null, data);
                    }
                }
            });

            return;

        }
        if (options.name == "menusectionlist" && action == "read") {


            Y.requestList({
                data: "option=" + options.name,
                callback: callback
            });
            return;

        }

        if (options.name == "menuitemlist" && action == "read") {

            var data = [new MenuItemModel({
                id: 1,
                label: 'signup',
                view: 'signup'
            }), new MenuItemModel({
                id: 2,
                label: 'item1'
            }), new MenuItemModel({
                id: 3,
                label: 'item1'
            })];

            Y.requestList({
                data: "option=" + options.name + "&section=" + options.section,
                callback: callback
            });

            return;

        }
        if (options.name == "wallposts" && action == "read") {
            if (!options.count) {
                options.count = 8;
            }

            Y.io(baseURL + 'in/wallposts', {
                method: 'POST',
                data: {
                    count: options.count
                },
                on: {
                    success: function (i, o, a) {
                        var data = Y.JSON.parse(o.responseText);
                        if (Y.Lang.isFunction(options.callback)) {
                            options.callback();
                        }
                        callback(null, data);
                    }
                }
            });

            return;
        }
        if (options.name == "myposts" && action == "read") {
            if (!options.count) {
                options.count = 8;
            }
            if (!options.user_id) {
                options.user_id = window.current_user;
            }

            Y.io(baseURL + 'in/userposts', {
                method: 'POST',
                data: {
                    count: options.count,
                    user_id: options.user_id
                },
                on: {
                    success: function (i, o, a) {
                        var data = Y.JSON.parse(o.responseText)
                        callback(null, data);
                    }
                }
            });
            return;
        }

        if (options.name == "groupList" && action == "read") {


            Y.io(baseURL + 'in/user_groups', {
                method: 'POST',
                on: {
                    success: function (i, o, a) {
                        var data = Y.JSON.parse(o.responseText)
                        callback(null, data);
                    }
                }
            });
        }


    }

    function modelSync(action, options, callback) {

        var data = this.toJSON();
        if (data._id == 0) {
            action = "create";

        }

        if (this.name == "postModel" || this.name == "eventModel" || this.name == "questionModel") {
            if (action == "create") {
                var model = this;
                data = this.toJSON();

                data.id = Y.Lang.now();
                Y.io(baseURL + 'io/create_post', {
                    method: 'POST',
                    data: data,
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            if (!response.error && response.data) {
                                model.setAttrs(response.data);
                            }
                            callback(null, data);
                        }
                    }
                });

                return;
            }
            if (action == "update") {
                var model = this;
                var data = this.toJSON();
                data.id = Y.Lang.now();
                Y.io(baseURL + 'io/update_post', {
                    method: 'POST',
                    data: data,
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            if (!response.error && response.data) {
                                model.setAttrs(response.data);
                            }
                            callback(null, data);
                        }
                    }
                });

                return;
            }
            if (action == 'read') {
                var model = this;
                var data = this.toJSON()
                Y.io(baseURL + 'io/get_model/', {
                    method: 'POST',
                    data: {
                        '_id': data['_id']
                    },
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            if (response) {
                                model.setAttrs(response);
                            }

                            callback(null, model.toJSON());

                        }
                    }
                });
            }
            if (action == 'delete') {
                var model = this;
                var data = this.toJSON()
                Y.io(baseURL + 'io/delete_model/', {
                    method: 'POST',
                    data: {
                        '_id': data['_id']
                    },
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            if (response) {
                                model.setAttrs(response);
                            }

                            callback(null, model.toJSON());

                        }
                    }
                });
            }

        }
        if (this.name == "groupModel") {
            if (action == "create") {
                var model = this;
                data = this.toJSON();

                data.id = Y.Lang.now();
                Y.io(baseURL + 'io/create_group', {
                    method: 'POST',
                    data: data,
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            if (!response.error && response.data) {
                                model.setAttrs(response.data);
                            }
                            callback(null, data);
                        }
                    }
                });

                return;
            }

            if (action == "read") {
                var model = this;
                var data = this.toJSON()
                Y.io(baseURL + 'io/get_model/', {
                    method: 'POST',
                    data: {
                        '_id': data['_id']
                    },
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            if (response) {
                                model.setAttrs(response);
                            }

                            callback(null, model.toJSON());

                        }
                    }
                });
            }
        }

        if (this.name == "commentModel") {
            if (action == "create") {
                var model = this;
                var data = this.toJSON();
                data.id = Y.Lang.now();
                Y.io(baseURL + 'io/create_comment', {
                    method: 'POST',
                    data: data,
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            if (!response.error && response.data) {
                                model.setAttrs(response.data);
                            }

                            callback(null, response.data);
                        }
                    }
                });
                //THIS NEEDS TO BE INSIDE AN AJAX CALL
                return;
            }

        }

        if (this.name == "userModel") {
            var model = this;
            if (action == "update") {

                var data = this.toJSON();

                Y.io(baseURL + 'io/update_user', {
                    method: 'POST',
                    data: data,
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            if (response.success && response.data) {
                                model.setAttrs(response.data);
                                callback(null, data);
                            } else {
                                callback(response.error);
                            }
                        }
                    }
                });

                return;
            }
            if (action == "read") {
                var data = this.toJSON()
                Y.io(baseURL + 'io/get_user/', {
                    method: 'POST',
                    data: {
                        '_id': data['_id']
                    },
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            if (response) {
                                model.setAttrs(response);
                            }

                            callback(null, model.toJSON());

                        }
                    }
                });
            }
        }

        if (this.name == "ConnectionModel") {
            var model = this;
            if (action == "update" || action == "create") {

                var data = this.toJSON();

                Y.io(baseURL + 'io/update_connection', {
                    method: 'POST',
                    data: data,
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            if (response.success && response.data) {
                                model.setAttrs(response.data);
                                callback(null, data);
                            } else {
                                callback(response.error);
                            }
                        }
                    }
                });

                return;
            }
            if (action == "read") {
                var data = this.toJSON()
                Y.io(baseURL + 'io/get_connection/', {
                    method: 'POST',
                    data: data,
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            for (var k in response) {
                                if (response[k] == "false") {
                                    response[k] = false;
                                }
                                if (response[k] == "true") {
                                    response[k] = true;
                                }
                            }
                            if (response) {
                                model.setAttrs(response);
                            }

                            callback(null, model.toJSON());

                        }
                    }
                });
            }
        }

        if (this.name == 'relationshipModel') {
            var model = this;
            if (action == "update" || action == "create") {

                var data = this.toJSON();

                Y.io(baseURL + 'io/update_relationship', {
                    method: 'POST',
                    data: data,
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            if (response.success && response.data) {
                                model.setAttrs(response.data);
                                callback(null, data);
                            } else {
                                callback(response.error);
                            }
                        }
                    }
                });

                return;
            }
            if (action == "read") {
                var data = this.toJSON()
                Y.io(baseURL + 'io/get_relationship/', {
                    method: 'POST',
                    data: data,
                    on: {
                        success: function (i, o, a) {
                            var response = Y.JSON.parse(o.responseText);
                            for (var k in response.data) {
                                if (response[k] == "false") {
                                    response[k] = false;
                                }
                                if (response[k] == "true") {
                                    response[k] = true;
                                }
                            }
                            if (response) {
                                model.setAttrs(response.data);
                            }

                            callback(null, model.toJSON());

                        }
                    }
                });
            }
        }
    }
    var sanitizeUI = function () {
            Y.one("#maincontainer").setContent(Y.one("#main").getContent());
            Y.loadTemplate("topbar", function () {
                Y.App.views.topbar = new Y.TopBarView();
            });
            Y.loadTemplate("sidebar", function () {
                Y.App.views.sidebar = new Y.SideBarView();
            });
        };
    var autoExpand = function (r) {

            r.on("change|keyup", function () {
                c = Y.Node.create("<div/>");
                c.addClass("textarea");
                c.setStyle("width", r.getComputedStyle("width"));
                c.setStyle("display", "block");
                c.setContent("<pre>" + r.get("value") + "</pre>");
                c.setStyle("position", "absolute");
                c.setStyle("z-index", "-20");
                Y.one("body").append(c);
                var targetHeight = c.getComputedStyle('height');
                r.setStyle("height", targetHeight);
                c.setStyle("display", "none");
                c.remove();

            });
        };
    var ConnectionModel = Y.Base.create('ConnectionModel', Y.Model, [], {
        sync: modelSync,
        idAttribute: '_id',
        isFriend: function () {
            if (this.get('target_connects_source') && this.get('source_connects_target')) {
                return true;
            } else {
                return false;
            }
        },
        requestedFriend: function () {
            if (this.get('target_connects_source') && !this.get('source_connects_target')) {
                return true;
            } else {
                return false;
            }
        },
        requestPending: function () {
            if (!this.get('target_connects_source') && this.get('source_connects_target')) {
                return true;
            } else {
                return false;
            }
        },
        isFollowing: function () {
            if (this.get('source_follows_target')) {
                return true;
            }
            return false;
        }
    }, {
        ATTRS: {

            'source_user': {
                value: ''
            },
            'target_user': {
                value: ''
            },
            'source_follows_target': {
                value: false
            },
            'target_follows_source': {
                value: false
            },
            'target_connects_source': {
                value: false
            },
            'source_connects_target': {
                value: false
            },
            'type': {
                value: 'connection'
            }
        }

    });
    var WallView = Y.Base.create('wall', Y.View, [], {
        containerTemplate: '<div/>',
        user_id: window.current_user,
        events: {
            '#loadMore': {
                click: 'loadNext'
            }
        },
        clearWall: function () {
            this.get('container').setHTML(Y.one('#wall').getHTML());
        },
        loadWall: function (command) {
            if (command == 'my') {
                command = 'myposts';
            }
            if (command == 'stream') {
                command = null;
            }
            this.get('wall').load({
                name: command || this.get('loadCommand'),
                user_id: this.get('user_id') || window.current_user
            });
        },
        loadNext: function () {
            this.get('wall').next(this.get('loadCommand'), (this.get('user_id') || window.current_user));
        },
        initializer: function () {
            this.get('container').setHTML(Y.one('#wall').getHTML());
            var wall = new Y.BABE.PostList();

            wall.after('add', this.prepend, this);
            wall.after('load', this.render, this);
            wall.load({
                name: this.get('loadCommand'),
                user_id: this.get('user_id') || window.current_user
            });

            this.set('wall', wall);

        },
        prepend: function (e) {

            var view;
            if (e.model.get('category') == 'event' && !Y.APPCONFIG.event_enabled) {
                return true;
            }
            if (e.model.get('category') == 'event') {
                view = new Y.EventView({
                    model: e.model
                });
            } else {
                view = new Y.PostView({
                    model: e.model
                });
            }
            var post = view.render().get('container');
            if (!this.get('container').one("#" + e.model.get("_id"))) {
                if (this.get('container').one(".left").all(".postrow").size() > this.get('container').one(".right").all(".postrow").size()) {
                    this.get('container').one(".right").append(post);
                } else {
                    this.get('container').one(".left").append(post);
                }
            }

        },
        render: function () {


            this.get('wall').each(function (item, index) {
                this.prepend({
                    model: item
                });
            }, this);

            return this;
        }

    });
    var UserView = Y.Base.create('UserView', Y.View, [], {
        containerTemplate: '<div/>',
        updateContainer: function () {

            this.get('container').setContent(
            Y.Lang.sub(Y.one('#user_page').getHTML(), {
                USERID: this.get('model').get('_id'),
                FULLNAME: this.get('model').get('fullname'),
            }));
            if (this.get('wall')) {
                this.get('container').one('#user_wall').setHTML(this.get('wall').render().get('container'));
            }

            if (this.connection.get('source_follows_target')) {
                this.get('container').one("#follow_user").set("innerHTML", '<i class="icon-white icon-eye-close"></i> Unfollow');
                this.get('container').one("#follow_user").set("data-content", "You will stop seeing activity of this user on your homepage.");
                this.get('container').one("#follow_user").set("data-original-title", "Unfollow");
                this.get('container').one("#follow_user").removeClass("btn-success").addClass("btn-warning");
                $(this.get('container').all('button[rel=popover]').getDOMNodes()).popover({
                    placement: 'bottom'
                });
            } else if (this.connection.get('target_follows_source')) {
                this.get('container').one("#follow_user").set("innerHTML", '<i class="icon-white icon-eye-open"></i> Follow Back');
                this.get('container').one("#follow_user").set("data-content", "This user is already following you. You might want to return the gesture.");
                this.get('container').one("#follow_user").set("data-original-title", "Follow Back");
                this.get('container').one("#follow_user").removeClass("btn-warning").addClass("btn-success");
                $(this.get('container').all('button[rel=popover]').getDOMNodes()).popover({
                    placement: 'bottom'
                });
            }



            if (this.connection.isFriend()) {
                this.get('container').one("#connect_user").set("innerHTML", '<i class="icon-white icon-minus"></i> Disconnect');
                this.get('container').one("#connect_user").set("data-content", "You will not be able to share private stuff anymore.");
                this.get('container').one("#connect_user").set("data-original-title", "Disconnect");
                this.get('container').one("#connect_user").removeClass("btn-success").addClass("btn-warning");
                $(this.get('container').all('button[rel=popover]').getDOMNodes()).popover({
                    placement: 'bottom'
                });
            } else if (this.connection.requestedFriend()) {
                this.get('container').one("#connect_user").set("innerHTML", '<i class="icon-white icon-plus"></i> Accept Connection Request');
                this.get('container').one("#connect_user").set("data-content", "This user has sent you a connection request. You want to accept it ?");
                this.get('container').one("#connect_user").set("data-original-title", "Accept Connection");
                this.get('container').one("#connect_user").removeClass("btn-warning").addClass("btn-success");
                $(this.get('container').all('button[rel=popover]').getDOMNodes()).popover({
                    placement: 'bottom'
                });
            } else if (this.connection.requestPending()) {
                this.get('container').one("#connect_user").set("innerHTML", '<i class="icon-white icon-minus"></i> Withdraw Request');
                this.get('container').one("#connect_user").set("data-content", "This person has not yet accepted your Connect Request");
                this.get('container').one("#connect_user").set("data-original-title", "Disconnect");
                this.get('container').one("#connect_user").removeClass("btn-success").addClass("btn-warning");
                $(this.get('container').all('button[rel=popover]').getDOMNodes()).popover({
                    placement: 'bottom'
                });
            }

            this.get('container').one("#connect_user").on('click', function () {
                this.connection.set('source_connects_target', !this.connection.get('source_connects_target'));
                this.connection.save();
            }, this);

            this.get('container').one("#follow_user").on('click', function () {
                this.connection.set('source_follows_target', !this.connection.get('source_follows_target'));
                this.connection.save();
            }, this);


        },
        initializer: function (config) {

            var that = this;
            if (config && config.user_id) {
                this.set('model', new Y.BABE.UserModel({
                    '_id': config.user_id
                }));
                this.connection = new ConnectionModel({
                    source_user: window.current_user,
                    target_user: config.user_id
                });
                this.get('model').after('change', this.updateContainer, this);
                this.connection.after('change', function () {
                    this.updateContainer();
                }, this);
                this.connection.load({}, function () {
                    that.updateContainer.call(that); //change the context of the function
                });
                this.get('model').load({}, function () {
                    that.updateContainer.call(that); //change the context of the function
                });
                var wall = new WallView({
                    loadCommand: 'myposts',
                    user_id: config.user_id
                });
                this.set('wall', wall);

            }
        },
        render: function () {

            return this;
        }
    });



    var ImageUploadView = Y.Base.create('ImageUploadView', Y.View, [], {
        containerTemplate: '<div/>',
        display: '',
        getUploadedImage: function () {
            if (this.image) {
                return this.image;
            }
            return false;
        },
        initializer: function (config) {
            this.display = config && config.display;
            this.uploadedCallback = config && config.uploadedCallback;
            var viewObj = this;
            if (!Y.one("#imageUploaderModal")) {
                this.get('container').setContent(Y.one("#image_uploader").getContent());
                Y.one("body").append(this.get('container'));

                Y.one("#upload-img-btn").on("click", function () {
                    var cfg = {
                        method: 'POST',
                        form: {
                            id: Y.one("#imageuploader"),
                            upload: true
                        },
                        on: {
                            start: function () {
                                Y.one("#image-loading").setContent("<img src='" + baseURL + "static/loader.gif'/>");
                            },
                            end: function (i, o, a) {
                                //$("#imageUploaderModal").modal('hide');
                            },
                            complete: function (i, o, a) {
                                var r = Y.JSON.parse(o.responseText);
                                if (r.success) {

                                    Y.one("#image-loading").setContent("Success!");
                                    viewObj.image = r.image_url;
                                    $("#imageUploaderModal").modal('hide');
                                    if (viewObj.uploadedCallback && Y.Lang.isFunction(viewObj.uploadedCallback)) {
                                        viewObj.uploadedCallback(r.image_url);
                                    }
                                    Y.one(viewObj.display).setContent("<img src='" + baseURL + viewObj.image + "' class='span11 thumbnail'/><p class='pull-right'><a href='#' class='remove'>Remove</a></p>");
                                    Y.one(viewObj.display).one(".remove").on("click", function (e) {
                                        e.preventDefault();
                                        Y.one(viewObj.display).setContent("");
                                    });
                                } else {

                                    Y.one("#image-loading").setContent(Y.Lang.sub(
                                    Y.one("#error-alert").getContent(), {
                                        ERROR: r.error
                                    }));
                                    $("#" + Y.one("#image-loading").one(".alert").generateID()).alert();

                                }

                            }
                        }
                    };
                    var request = Y.io(baseURL + 'io/image_upload', cfg);
                });

            }

            $("#imageUploaderModal").modal({
                keyboard: false
            });

        },
        render: function () {
            $("#imageUploaderModal").modal('show');
        }
    });
    var UserModel = Y.Base.create('userModel', Y.Model, [], {
        sync: modelSync,
        idAttribute: '_id',
        validate: function (attr) {

            if (!attr.fullname) {
                return {
                    field: 'fullname',
                    message: 'Full name can not be empty!'
                }
            } else if (attr.fullname.length > 100) {
                return {
                    field: 'fullname',
                    message: 'Thats a very long name. Will you mind making it a bit short ?'
                }
            }

        }
    }, {

        ATTRS: {
            '_id': {
                value: ''
            },
            '_rev': {
                value: ''
            },
            username: {
                value: ''
            },
            password: {
                value: ''
            },
            email: {
                value: ''
            },
            fullname: {
                value: ''
            },
            gender: {
                value: ''
            },
            city: {
                value: ''
            },
            country: {
                value: ''
            },
            mobile: {
                value: ''
            },
            profile_pic: {
                value: baseURL + 'static/images/male_profile.png'
            },
            dob: {
                value: ''
            },
            type: {
                value: 'user'
            }
        }
    });

    var ProfileView = Y.Base.create('profileView', Y.View, [], {
        containerTemplate: '<div/>',
        template_id: '#profileview-template',
        initializer: function () {

        },
        updateVals: function () {
            var container = this.get('container');
            if (this.get('model')) {

                container.all("input").each(function (node) {

                    if (node.get("type") == "text" && this.get('model').get(node.get("name")) != undefined) {
                        node.set("value", this.get('model').get(node.get("name")));
                    } else if (node.get('type') == 'radio' && this.get('model').get(node.get("name")) != undefined) {
                        if (node.get("value") == this.get('model').get(node.get("name"))) {
                            container.all("[name=" + node.get("name") + "]").removeAttribute("checked");
                            node.set("checked", "true");
                        }
                    }

                }, this);

                if (this.get('model').get("profile_pic") && this.get('model').get("profile_pic") != "false" && this.get('model').get("profile_pic") != "undefined") {

                    this.get('container').one(".image_preview").setContent("<img src=" + this.get('model').get("profile_pic") + " class='thumbnail'/>");
                } else if (this.get('model').get("gender") == "male") {
                    this.get('container').one(".image_preview").setContent("<img src=" + Y.BABE.male_image + " class='thumbnail'/>");
                } else {
                    this.get('container').one(".image_preview").setContent("<img src=" + Y.BABE.female_image + " class='thumbnail'/>");
                }
            }
        },
        render: function () {
            var viewObj = this;
            this.template = Y.one('#profileview-template').getContent();
            this.get('container').setContent(this.template);
            var container = this.get('container');
            container.all("[rel=popover]").each(function (node) {
                $(node.getDOMNode()).popover();
            });
            this.updateVals();
            if (this.get('model')) {
                this.get('model').on('change', function () {
                    this.updateVals();
                }, this);

            }
            container.one(".img-upload").on("click", function () {
                viewObj.img = new Y.BABE.ImageUploadView({
                    display: ".image_preview",
                    uploadedCallback: function (url) {
                        viewObj.get('model').set